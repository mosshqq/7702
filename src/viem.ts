import { eoa, contractAddress, walletClient, fluentTestClient, metamaskTestClient } from "./constants";
import Erc20Abi from "./ERC20.json";
import { encodeFunctionData } from "viem";

export const delegate = async () => {
  // 1. Authorize designation of the Contract onto the EOA.
  const authorization = await walletClient.signAuthorization({
    contractAddress,
    account: eoa,
    // chainId: 1,
    // executor: "self",
  });

  // 2. Designate the Contract on the EOA, and invoke the
  //    `initialize` function.
  const hash = await walletClient.sendTransaction({
    authorizationList: [
      authorization,
    ],
    //                  â†‘ 3. Pass the Authorization as a parameter.
    // data: "0x",
    // gas: 21065n,
    // gas: 71000n,
    // data: encodeFunctionData({
    //   abi: Erc20Abi.abi,
    //   functionName: "approve",
    //   args: ['0x7d682e65efc5c13bf4e394b8f376c48e6bae0355', 20000000000000n],
    // }),
    to: eoa.address,
    // to: walletClient.account.address,
    // to: "0x0000000000000000000000000000000000000000",
  });
  return hash;
};

export const approve = async () => {
  const hash = await walletClient.sendTransaction({
    // account: address,
    // value: 10000000000000n,
    // value: 0n,
    // data: '0x0233213121213',
    data: encodeFunctionData({
      abi: Erc20Abi.abi,
      functionName: "approve",
      args: ['0x7d682e65efc5c13bf4e394b8f376c48e6bae0355', 20000000000000n],
    }),
    to: eoa.address,
    // gas: 220640n,
    // gas: 200000n,
    // to: "0x56Fe7077f8097D84B49B478b2A8D17d8BaDbd919",
    // to: "0xebd69Ae27605705DEA932bF171b53A10a197753e",
  });
  return hash;
};

export const transfer = async () => {
  const hash = await walletClient.sendTransaction({
    // account: address,
    // value: 10000000000000n,
    // value: 0n,
    // data: '0x0233213121213',
    data: encodeFunctionData({
      abi: Erc20Abi.abi,
      functionName: "transfer",
      args: [eoa.address, 20000000000000n],
    }),
    to: eoa.address,
    // to: "0x7d682e65efc5c13bf4e394b8f376c48e6bae0355",
    // gas: 220640n,
    // gas: 200000n,
    // to: "0x56Fe7077f8097D84B49B478b2A8D17d8BaDbd919",
    // to: "0xebd69Ae27605705DEA932bF171b53A10a197753e",
  });
  return hash;
};

const test = async (client: typeof metamaskTestClient) => {
  const [address] = await client.requestAddresses();
  const hash = await client.sendTransaction({
    // type: 'legacy',
    account: address,
    // value: 0n,
    // value: 1n,
    // data: '0x60806040523480156200001157600080fd5b5060405162000f4338038062000f438339810160408190526200003491620001df565b82828282600390805190602001906200004f92919062000086565b5081516200006590600490602085019062000086565b506005805460ff191660ff9290921691909117905550620002b39350505050565b828054620000949062000260565b90600052602060002090601f016020900481019282620000b8576000855562000103565b82601f10620000d357805160ff191683800117855562000103565b8280016001018555821562000103579182015b8281111562000103578251825591602001919060010190620000e6565b506200011192915062000115565b5090565b5b8082111562000111576000815560010162000116565b600082601f8301126200013d578081fd5b81516001600160401b03808211156200015a576200015a6200029d565b604051601f8301601f19908116603f011681019082821181831017156200018557620001856200029d565b81604052838152602092508683858801011115620001a1578485fd5b8491505b83821015620001c45785820183015181830184015290820190620001a5565b83821115620001d557848385830101525b9695505050505050565b600080600060608486031215620001f4578283fd5b83516001600160401b03808211156200020b578485fd5b62000219878388016200012c565b945060208601519150808211156200022f578384fd5b506200023e868287016200012c565b925050604084015160ff8116811462000255578182fd5b809150509250925092565b6002810460018216806200027557607f821691505b602082108114156200029757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610c8080620002c36000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806340c10f191161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db576100df565b806340c10f191461017257806342966c681461018757806370a082311461019a576100df565b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a578063395093511461015f576100df565b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610214565b6040516100f99190610b77565b60405180910390f35b610115610110366004610b36565b6102a6565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b610115610145366004610afb565b6102bc565b60055460405160ff90911681526020016100f9565b61011561016d366004610b36565b610380565b610185610180366004610b36565b6103bc565b005b610185610195366004610b5f565b6103ca565b6101296101a8366004610aa8565b6103d7565b6100ec6103f6565b6101156101c3366004610b36565b610405565b6101156101d6366004610b36565b6104b6565b6101296101e9366004610ac9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022390610bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610bf9565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b33384846104c3565b50600192915050565b60006102c984848461061c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103685760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61037585338584036104c3565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102b39185906103b7908690610bca565b6104c3565b6103c68282610834565b5050565b6103d43382610914565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461022390610bf9565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561049f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161035f565b6104ac33858584036104c3565b5060019392505050565b60006102b333848461061c565b6001600160a01b03831661053e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b0382166105ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166106985760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b0382166107145760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b038316600090815260208190526040902054818110156107a35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107da908490610bca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161082691815260200190565b60405180910390a350505050565b6001600160a01b03821661088a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035f565b806002600082825461089c9190610bca565b90915550506001600160a01b038216600090815260208190526040812080548392906108c9908490610bca565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36103c6565b6001600160a01b0382166109905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b03821660009081526020819052604090205481811015610a1f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161035f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a4e908490610be2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161060f565b80356001600160a01b03811681146103f157600080fd5b600060208284031215610ab9578081fd5b610ac282610a91565b9392505050565b60008060408385031215610adb578081fd5b610ae483610a91565b9150610af260208401610a91565b90509250929050565b600080600060608486031215610b0f578081fd5b610b1884610a91565b9250610b2660208501610a91565b9150604084013590509250925092565b60008060408385031215610b48578182fd5b610b5183610a91565b946020939093013593505050565b600060208284031215610b70578081fd5b5035919050565b6000602080835283518082850152825b81811015610ba357858101830151858201604001528201610b87565b81811115610bb45783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610bdd57610bdd610c34565b500190565b600082821015610bf457610bf4610c34565b500390565b600281046001821680610c0d57607f821691505b60208210811415610c2e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220582dadebfe814b56a22e2df117b9c9c1c364e895da5dc5886541ad3f12dc828664736f6c63430008020033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000b466175636574205553445400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553445400000000000000000000000000000000000000000000000000000000',
    // data: '0xa7566e77000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a5000000000000019d00009701000005007401000000006e010000000068010000d27b869550b1b7872d29f5bfbfadd08955a5bc428eff000002000000000000006365323530333036332e7277612e7369740000001c7b5bc82895c85a6d9629ca00bfa9fcac51410008ea8a0bc36cb32fcb61497d12636f6e666c757865537061a7640000000000a4ffffffff00000000000002710100000000000000000000005974891d0000000000000000000000000000000000000000000000000de0b6b3abb7f098000000000000000000000000d56e13b01ebc58bfeb5807a9897147db05577ea0000000000000000000000000e9e0f616984f4bb8c6341254020d77bc287e24d50000000000000000000000001c48b2da736269cb80c86109fee2d3cb97b897c3ababbd816ee19debf49850ffbb57c1a28ca8615ed5927802ed69592100000000000000000000000000000000000000000000000000000000000001190000000000000000000000000000000060aa91bf76c01a25da00392e49cd04c7c11913c200000001090017000000616c646162615369743235303330362e7277612e736974000000000000000000000000000000000000000000000000000000',
    // data: '0x95ea7b30000000000000000000000007d682e65efc5c13bf4e394b8f376c48e6bae0355000000000000000000000000000000000000000000000000000012309ce54000',
    // data: '0x0',
    data: encodeFunctionData({
      abi: Erc20Abi.abi,
      functionName: "transfer",
      args: ['0x7d682e65efc5c13bf4e394b8f376c48e6bae0355', 2000000000000n],
    }),
    // to: "0x7d682e65efc5c13bf4e394b8f376c48e6bae0355",
    to: "0x96ee5ac72ab76d4fbf7207d000c0d95835c24579",
    // to: "0x56Fe7077f8097D84B49B478b2A8D17d8BaDbd919",
    // gas: 220640n,
    // gas: 200000n,
    // to: "0x6F0aa008bc1402f4a1480a5D58C809Ed1B8c2755",
  });
  return hash;
}

export const fluentTest = async () => {
  console.log('fluentTest')
  return test(fluentTestClient);
};

export const metamaskTest = async () => {
  console.log('metamaskTest')
  return test(metamaskTestClient);
};